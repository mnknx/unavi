// @generated by protobuf-ts 2.9.1
// @generated from protobuf file "editor/event.proto" (package "xyz.unavi.editor.event", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { SyncScene } from "./sync";
/**
 * @generated from protobuf message xyz.unavi.editor.event.EditorEvent
 */
export interface EditorEvent {
    /**
     * @generated from protobuf oneof: event
     */
    event: {
        oneofKind: "syncScene";
        /**
         * @generated from protobuf field: xyz.unavi.editor.sync.SyncScene sync_scene = 1;
         */
        syncScene: SyncScene;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class EditorEvent$Type extends MessageType<EditorEvent> {
    constructor() {
        super("xyz.unavi.editor.event.EditorEvent", [
            { no: 1, name: "sync_scene", kind: "message", oneof: "event", T: () => SyncScene }
        ]);
    }
    create(value?: PartialMessage<EditorEvent>): EditorEvent {
        const message = { event: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EditorEvent>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EditorEvent): EditorEvent {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* xyz.unavi.editor.sync.SyncScene sync_scene */ 1:
                    message.event = {
                        oneofKind: "syncScene",
                        syncScene: SyncScene.internalBinaryRead(reader, reader.uint32(), options, (message.event as any).syncScene)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EditorEvent, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* xyz.unavi.editor.sync.SyncScene sync_scene = 1; */
        if (message.event.oneofKind === "syncScene")
            SyncScene.internalBinaryWrite(message.event.syncScene, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message xyz.unavi.editor.event.EditorEvent
 */
export const EditorEvent = new EditorEvent$Type();
